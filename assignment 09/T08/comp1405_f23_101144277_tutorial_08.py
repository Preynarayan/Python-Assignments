#Prayasnhu Narayan S#101144277
# Tutorial 8: Sorting and Searching
#Do you actually believe the licensing information comment provided to be accurate? What 
#do you think the ramifications might be of code generated by proprietary training data? 
#No i do not. The ramifications of code generated by proprietary training data is that it
#can be used to make the code more efficient and accurate. But it can also be used to make
#the code less efficient and accurate. It all depends on the training data and how it is used

#No i did not see a  very specific ethnic group being targeted,


# scottish_surnames = [
#     'Aitken', 'Anderson', 'Barclay', 'Baxter', 'Brodie', 'Campbell', 'Cameron', 
#     'Cunningham', 'Douglas', 'Drummond', 'Duncan', 'Farquharson', 'Ferguson', 
#     'Fraser', 'Gibson', 'Gordon', 'Graham', 'Hamilton', 'Innes', 'Irvine', 
#     'Johnston', 'Keith', 'Kennedy', 'Kerr', 'Liddell', 'Livingston', 'Macdonald', 
#     'Macintosh', 'Macpherson', 'Munro', 'Murray', 'Nelson', 'Ogilvie', 'Oliver', 
#     'Paterson', 'Quinn', 'Ramsay', 'Reid', 'Robertson', 'Scott', 'Sinclair', 
#     'Stewart', 'Taylor', 'Thomson', 'Turner', 'Urquhart', 'Wallace', 'Wallace', 
#     'Watson', 'Young'
# ]
import sys
#ChatGpt made bad code so i fixed it
names_list = [
    "Adams", "Allen", "Baker", "Brooks", "Campbell", "Carter", "Davis", "Diaz", "Edwards", "Evans",
    "Fisher", "Flores", "Garcia", "Gomez", "Harris", "Hughes", "Ibrahim", "Ingram", "Jenkins",
    "Johnson", "Kang", "Kelly", "Lee", "Lopez", "Martinez", "Mitchell", "Nguyen", "O'Connor",
    "Oliver", "Parker", "Patel", "Quinn", "Rivera", "Robinson", "Singh", "Smith", "Taylor",
    "Torres", "Upton", "Vasquez", "Vega", "Walker", "Williams", "Xavier", "Xu", "Yang", "Yates",
    "Young", "Zhang"
]


def sort(input_str: str) -> str:
    # Define a subset of names for demonstration purposes

    
    # Calculate the positions for 25%, 50%, and 75% of the list
    quarter = 12
    half = 24
    three_quarters = 28
    
    # Find the index of the input string in the sorted list
    # index = sorted(names_list + [input_str]).index(input_str)
    # Determine the position of the input string
    if input_str.upper() < names_list[quarter].upper():
        return "Before 25%"
    elif input_str.upper() < names_list[half].upper():
        return "Between 25% and 50%"
    elif input_str.upper() < names_list[three_quarters].upper():
        return "Between 50% and 75%"
    else:
        return "After 75%"
    
    # elif quarter <= index < half:
    #     return "Between 25% and 50%"
    # elif half <= index < three_quarters:
    #     return "Between 50% and 75%"
    # else:
    #     return "After 75%"


def main():

    if len(sys.argv) > 1:
        test_string = sys.argv[1]
    else:
        test_string = input("Enter a name: ")
    
    
    position = sort(test_string)
    print(f"The position of '{test_string}' is: {position}")

main()
# Note: This code snippet is provided as a demonstration and may be subject 
# to the licensing terms or usage restrictions associated with the original code or
# data used in practice. Always ensure compliance with applicable licenses and p
# ermissions when using code or data from external sources.